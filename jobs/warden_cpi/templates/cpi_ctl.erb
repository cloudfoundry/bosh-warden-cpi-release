#!/bin/bash

LOG_DIR=/var/vcap/sys/log/warden_cpi
RUN_DIR=/var/vcap/sys/run/warden_cpi
PIDFILE=$RUN_DIR/cpi.pid
SUDOERS_FILE=/etc/sudoers.d/warden_cpi

case $1 in

  start)
    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    # todo hacky solution to load aufs/overlayfs at the outermost level ie VM
    # where modprobe is not going to complain about mismatched kernel version
    modprobe -q aufs || true
    modprobe -q overlayfs || true
    modprobe -q overlay || true

    # Avoids "failed to setup loop device" when trying to "mount" persistent disks into garden containers
    if [ ! -e /dev/loop-control ]; then
      mknod /dev/loop-control c 10 237
    fi

    <% if_p('warden_cpi.host_ip') do |host_ip| %>
    ifconfig lo:1 <%= host_ip %> netmask 255.255.255.0
    <% end %>

    <% if_p('warden_cpi.loopback_range') do |r| %>
    (
        set -e

        mount_path=/tmp/self-cgroups
        cgroups_path=`cat /proc/self/cgroup|grep devices|cut -d: -f3`

        # Clean up possibly leftover cgroups mount
        [ -d $mount_path ] && umount $mount_path && rmdir $mount_path

        # Make new mount for cgroups
        mkdir -p $mount_path
        mount -t cgroup -o devices none $mount_path

        # Allow loop devices
        echo 'b 7:* rwm' > $mount_path/$cgroups_path/devices.allow

        # Clean up cgroups mount
        umount $mount_path
        rmdir $mount_path

        <% (r[0]..r[1]).each do |i| %>
        [ ! -b /dev/loop<%= i %> ] && mknod /dev/loop<%= i %> b 7 <%= i %>
        <% end %>
    )
    <% end %>

    <% p('warden_cpi.no_masq_cidrs').each do |cidr| %>
    iptables -I POSTROUTING -t nat --source <%= cidr %> --destination <%= cidr %> --jump ACCEPT
    <% end %>

    # Logs are generated by bin/cpi
    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    cp /var/vcap/jobs/warden_cpi/config/sudoers $SUDOERS_FILE
    chmod 440 $SUDOERS_FILE

    echo 1 > $PIDFILE
    ;;

  stop)
    rm -f $SUDOERS_FILE
    rm -f $PIDFILE

    ;;

  *)

  echo "Usage: cpi_ctl {start|stop}" ;;
esac
