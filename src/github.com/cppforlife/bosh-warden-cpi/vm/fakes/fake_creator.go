// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cppforlife/bosh-cpi-go/apiv1"
	"github.com/cppforlife/bosh-warden-cpi/stemcell"
	"github.com/cppforlife/bosh-warden-cpi/vm"
)

type FakeCreator struct {
	CreateStub        func(apiv1.AgentID, stemcell.Stemcell, vm.VMProps, apiv1.Networks, apiv1.VMEnv) (vm.VM, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 apiv1.AgentID
		arg2 stemcell.Stemcell
		arg3 vm.VMProps
		arg4 apiv1.Networks
		arg5 apiv1.VMEnv
	}
	createReturns struct {
		result1 vm.VM
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreator) Create(arg1 apiv1.AgentID, arg2 stemcell.Stemcell, arg3 vm.VMProps, arg4 apiv1.Networks, arg5 apiv1.VMEnv) (vm.VM, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 apiv1.AgentID
		arg2 stemcell.Stemcell
		arg3 vm.VMProps
		arg4 apiv1.Networks
		arg5 apiv1.VMEnv
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2, arg3, arg4, arg5)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeCreator) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeCreator) CreateArgsForCall(i int) (apiv1.AgentID, stemcell.Stemcell, vm.VMProps, apiv1.Networks, apiv1.VMEnv) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2, fake.createArgsForCall[i].arg3, fake.createArgsForCall[i].arg4, fake.createArgsForCall[i].arg5
}

func (fake *FakeCreator) CreateReturns(result1 vm.VM, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 vm.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vm.Creator = new(FakeCreator)
