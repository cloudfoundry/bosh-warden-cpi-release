// This file was generated by counterfeiter
package apiv1fakes

import (
	"sync"

	"github.com/cppforlife/bosh-cpi-go/apiv1"
)

type FakeCPI struct {
	InfoStub        func() (apiv1.Info, error)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct{}
	infoReturns     struct {
		result1 apiv1.Info
		result2 error
	}
	CreateStemcellStub        func(string, apiv1.StemcellCloudProps) (apiv1.StemcellCID, error)
	createStemcellMutex       sync.RWMutex
	createStemcellArgsForCall []struct {
		arg1 string
		arg2 apiv1.StemcellCloudProps
	}
	createStemcellReturns struct {
		result1 apiv1.StemcellCID
		result2 error
	}
	DeleteStemcellStub        func(apiv1.StemcellCID) error
	deleteStemcellMutex       sync.RWMutex
	deleteStemcellArgsForCall []struct {
		arg1 apiv1.StemcellCID
	}
	deleteStemcellReturns struct {
		result1 error
	}
	CreateVMStub        func(apiv1.AgentID, apiv1.StemcellCID, apiv1.VMCloudProps, apiv1.Networks, []apiv1.DiskCID, apiv1.VMEnv) (interface{}, error)
	createVMMutex       sync.RWMutex
	createVMArgsForCall []struct {
		arg1 apiv1.AgentID
		arg2 apiv1.StemcellCID
		arg3 apiv1.VMCloudProps
		arg4 apiv1.Networks
		arg5 []apiv1.DiskCID
		arg6 apiv1.VMEnv
	}
	createVMReturns struct {
		result1 interface{}
		result2 error
	}
	DeleteVMStub        func(apiv1.VMCID) error
	deleteVMMutex       sync.RWMutex
	deleteVMArgsForCall []struct {
		arg1 apiv1.VMCID
	}
	deleteVMReturns struct {
		result1 error
	}
	CalculateVMCloudPropertiesStub        func(apiv1.VMResources) (apiv1.VMCloudProps, error)
	calculateVMCloudPropertiesMutex       sync.RWMutex
	calculateVMCloudPropertiesArgsForCall []struct {
		arg1 apiv1.VMResources
	}
	calculateVMCloudPropertiesReturns struct {
		result1 apiv1.VMCloudProps
		result2 error
	}
	SetVMMetadataStub        func(apiv1.VMCID, apiv1.VMMeta) error
	setVMMetadataMutex       sync.RWMutex
	setVMMetadataArgsForCall []struct {
		arg1 apiv1.VMCID
		arg2 apiv1.VMMeta
	}
	setVMMetadataReturns struct {
		result1 error
	}
	HasVMStub        func(apiv1.VMCID) (bool, error)
	hasVMMutex       sync.RWMutex
	hasVMArgsForCall []struct {
		arg1 apiv1.VMCID
	}
	hasVMReturns struct {
		result1 bool
		result2 error
	}
	RebootVMStub        func(apiv1.VMCID) error
	rebootVMMutex       sync.RWMutex
	rebootVMArgsForCall []struct {
		arg1 apiv1.VMCID
	}
	rebootVMReturns struct {
		result1 error
	}
	GetDisksStub        func(apiv1.VMCID) ([]apiv1.DiskCID, error)
	getDisksMutex       sync.RWMutex
	getDisksArgsForCall []struct {
		arg1 apiv1.VMCID
	}
	getDisksReturns struct {
		result1 []apiv1.DiskCID
		result2 error
	}
	CreateDiskStub        func(int, apiv1.DiskCloudProps, *apiv1.VMCID) (apiv1.DiskCID, error)
	createDiskMutex       sync.RWMutex
	createDiskArgsForCall []struct {
		arg1 int
		arg2 apiv1.DiskCloudProps
		arg3 *apiv1.VMCID
	}
	createDiskReturns struct {
		result1 apiv1.DiskCID
		result2 error
	}
	DeleteDiskStub        func(apiv1.DiskCID) error
	deleteDiskMutex       sync.RWMutex
	deleteDiskArgsForCall []struct {
		arg1 apiv1.DiskCID
	}
	deleteDiskReturns struct {
		result1 error
	}
	AttachDiskStub        func(apiv1.VMCID, apiv1.DiskCID) (interface{}, error)
	attachDiskMutex       sync.RWMutex
	attachDiskArgsForCall []struct {
		arg1 apiv1.VMCID
		arg2 apiv1.DiskCID
	}
	attachDiskReturns struct {
		result1 interface{}
		result2 error
	}
	DetachDiskStub        func(apiv1.VMCID, apiv1.DiskCID) error
	detachDiskMutex       sync.RWMutex
	detachDiskArgsForCall []struct {
		arg1 apiv1.VMCID
		arg2 apiv1.DiskCID
	}
	detachDiskReturns struct {
		result1 error
	}
	HasDiskStub        func(apiv1.DiskCID) (bool, error)
	hasDiskMutex       sync.RWMutex
	hasDiskArgsForCall []struct {
		arg1 apiv1.DiskCID
	}
	hasDiskReturns struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCPI) Info() (apiv1.Info, error) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct{}{})
	fake.recordInvocation("Info", []interface{}{})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		return fake.InfoStub()
	} else {
		return fake.infoReturns.result1, fake.infoReturns.result2
	}
}

func (fake *FakeCPI) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeCPI) InfoReturns(result1 apiv1.Info, result2 error) {
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 apiv1.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) CreateStemcell(arg1 string, arg2 apiv1.StemcellCloudProps) (apiv1.StemcellCID, error) {
	fake.createStemcellMutex.Lock()
	fake.createStemcellArgsForCall = append(fake.createStemcellArgsForCall, struct {
		arg1 string
		arg2 apiv1.StemcellCloudProps
	}{arg1, arg2})
	fake.recordInvocation("CreateStemcell", []interface{}{arg1, arg2})
	fake.createStemcellMutex.Unlock()
	if fake.CreateStemcellStub != nil {
		return fake.CreateStemcellStub(arg1, arg2)
	} else {
		return fake.createStemcellReturns.result1, fake.createStemcellReturns.result2
	}
}

func (fake *FakeCPI) CreateStemcellCallCount() int {
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	return len(fake.createStemcellArgsForCall)
}

func (fake *FakeCPI) CreateStemcellArgsForCall(i int) (string, apiv1.StemcellCloudProps) {
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	return fake.createStemcellArgsForCall[i].arg1, fake.createStemcellArgsForCall[i].arg2
}

func (fake *FakeCPI) CreateStemcellReturns(result1 apiv1.StemcellCID, result2 error) {
	fake.CreateStemcellStub = nil
	fake.createStemcellReturns = struct {
		result1 apiv1.StemcellCID
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) DeleteStemcell(arg1 apiv1.StemcellCID) error {
	fake.deleteStemcellMutex.Lock()
	fake.deleteStemcellArgsForCall = append(fake.deleteStemcellArgsForCall, struct {
		arg1 apiv1.StemcellCID
	}{arg1})
	fake.recordInvocation("DeleteStemcell", []interface{}{arg1})
	fake.deleteStemcellMutex.Unlock()
	if fake.DeleteStemcellStub != nil {
		return fake.DeleteStemcellStub(arg1)
	} else {
		return fake.deleteStemcellReturns.result1
	}
}

func (fake *FakeCPI) DeleteStemcellCallCount() int {
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	return len(fake.deleteStemcellArgsForCall)
}

func (fake *FakeCPI) DeleteStemcellArgsForCall(i int) apiv1.StemcellCID {
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	return fake.deleteStemcellArgsForCall[i].arg1
}

func (fake *FakeCPI) DeleteStemcellReturns(result1 error) {
	fake.DeleteStemcellStub = nil
	fake.deleteStemcellReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPI) CreateVM(arg1 apiv1.AgentID, arg2 apiv1.StemcellCID, arg3 apiv1.VMCloudProps, arg4 apiv1.Networks, arg5 []apiv1.DiskCID, arg6 apiv1.VMEnv) (interface{}, error) {
	var arg5Copy []apiv1.DiskCID
	if arg5 != nil {
		arg5Copy = make([]apiv1.DiskCID, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.createVMMutex.Lock()
	fake.createVMArgsForCall = append(fake.createVMArgsForCall, struct {
		arg1 apiv1.AgentID
		arg2 apiv1.StemcellCID
		arg3 apiv1.VMCloudProps
		arg4 apiv1.Networks
		arg5 []apiv1.DiskCID
		arg6 apiv1.VMEnv
	}{arg1, arg2, arg3, arg4, arg5Copy, arg6})
	fake.recordInvocation("CreateVM", []interface{}{arg1, arg2, arg3, arg4, arg5Copy, arg6})
	fake.createVMMutex.Unlock()
	if fake.CreateVMStub != nil {
		return fake.CreateVMStub(arg1, arg2, arg3, arg4, arg5, arg6)
	} else {
		return fake.createVMReturns.result1, fake.createVMReturns.result2
	}
}

func (fake *FakeCPI) CreateVMCallCount() int {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return len(fake.createVMArgsForCall)
}

func (fake *FakeCPI) CreateVMArgsForCall(i int) (apiv1.AgentID, apiv1.StemcellCID, apiv1.VMCloudProps, apiv1.Networks, []apiv1.DiskCID, apiv1.VMEnv) {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return fake.createVMArgsForCall[i].arg1, fake.createVMArgsForCall[i].arg2, fake.createVMArgsForCall[i].arg3, fake.createVMArgsForCall[i].arg4, fake.createVMArgsForCall[i].arg5, fake.createVMArgsForCall[i].arg6
}

func (fake *FakeCPI) CreateVMReturns(result1 interface{}, result2 error) {
	fake.CreateVMStub = nil
	fake.createVMReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) DeleteVM(arg1 apiv1.VMCID) error {
	fake.deleteVMMutex.Lock()
	fake.deleteVMArgsForCall = append(fake.deleteVMArgsForCall, struct {
		arg1 apiv1.VMCID
	}{arg1})
	fake.recordInvocation("DeleteVM", []interface{}{arg1})
	fake.deleteVMMutex.Unlock()
	if fake.DeleteVMStub != nil {
		return fake.DeleteVMStub(arg1)
	} else {
		return fake.deleteVMReturns.result1
	}
}

func (fake *FakeCPI) DeleteVMCallCount() int {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return len(fake.deleteVMArgsForCall)
}

func (fake *FakeCPI) DeleteVMArgsForCall(i int) apiv1.VMCID {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return fake.deleteVMArgsForCall[i].arg1
}

func (fake *FakeCPI) DeleteVMReturns(result1 error) {
	fake.DeleteVMStub = nil
	fake.deleteVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPI) CalculateVMCloudProperties(arg1 apiv1.VMResources) (apiv1.VMCloudProps, error) {
	fake.calculateVMCloudPropertiesMutex.Lock()
	fake.calculateVMCloudPropertiesArgsForCall = append(fake.calculateVMCloudPropertiesArgsForCall, struct {
		arg1 apiv1.VMResources
	}{arg1})
	fake.recordInvocation("CalculateVMCloudProperties", []interface{}{arg1})
	fake.calculateVMCloudPropertiesMutex.Unlock()
	if fake.CalculateVMCloudPropertiesStub != nil {
		return fake.CalculateVMCloudPropertiesStub(arg1)
	} else {
		return fake.calculateVMCloudPropertiesReturns.result1, fake.calculateVMCloudPropertiesReturns.result2
	}
}

func (fake *FakeCPI) CalculateVMCloudPropertiesCallCount() int {
	fake.calculateVMCloudPropertiesMutex.RLock()
	defer fake.calculateVMCloudPropertiesMutex.RUnlock()
	return len(fake.calculateVMCloudPropertiesArgsForCall)
}

func (fake *FakeCPI) CalculateVMCloudPropertiesArgsForCall(i int) apiv1.VMResources {
	fake.calculateVMCloudPropertiesMutex.RLock()
	defer fake.calculateVMCloudPropertiesMutex.RUnlock()
	return fake.calculateVMCloudPropertiesArgsForCall[i].arg1
}

func (fake *FakeCPI) CalculateVMCloudPropertiesReturns(result1 apiv1.VMCloudProps, result2 error) {
	fake.CalculateVMCloudPropertiesStub = nil
	fake.calculateVMCloudPropertiesReturns = struct {
		result1 apiv1.VMCloudProps
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) SetVMMetadata(arg1 apiv1.VMCID, arg2 apiv1.VMMeta) error {
	fake.setVMMetadataMutex.Lock()
	fake.setVMMetadataArgsForCall = append(fake.setVMMetadataArgsForCall, struct {
		arg1 apiv1.VMCID
		arg2 apiv1.VMMeta
	}{arg1, arg2})
	fake.recordInvocation("SetVMMetadata", []interface{}{arg1, arg2})
	fake.setVMMetadataMutex.Unlock()
	if fake.SetVMMetadataStub != nil {
		return fake.SetVMMetadataStub(arg1, arg2)
	} else {
		return fake.setVMMetadataReturns.result1
	}
}

func (fake *FakeCPI) SetVMMetadataCallCount() int {
	fake.setVMMetadataMutex.RLock()
	defer fake.setVMMetadataMutex.RUnlock()
	return len(fake.setVMMetadataArgsForCall)
}

func (fake *FakeCPI) SetVMMetadataArgsForCall(i int) (apiv1.VMCID, apiv1.VMMeta) {
	fake.setVMMetadataMutex.RLock()
	defer fake.setVMMetadataMutex.RUnlock()
	return fake.setVMMetadataArgsForCall[i].arg1, fake.setVMMetadataArgsForCall[i].arg2
}

func (fake *FakeCPI) SetVMMetadataReturns(result1 error) {
	fake.SetVMMetadataStub = nil
	fake.setVMMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPI) HasVM(arg1 apiv1.VMCID) (bool, error) {
	fake.hasVMMutex.Lock()
	fake.hasVMArgsForCall = append(fake.hasVMArgsForCall, struct {
		arg1 apiv1.VMCID
	}{arg1})
	fake.recordInvocation("HasVM", []interface{}{arg1})
	fake.hasVMMutex.Unlock()
	if fake.HasVMStub != nil {
		return fake.HasVMStub(arg1)
	} else {
		return fake.hasVMReturns.result1, fake.hasVMReturns.result2
	}
}

func (fake *FakeCPI) HasVMCallCount() int {
	fake.hasVMMutex.RLock()
	defer fake.hasVMMutex.RUnlock()
	return len(fake.hasVMArgsForCall)
}

func (fake *FakeCPI) HasVMArgsForCall(i int) apiv1.VMCID {
	fake.hasVMMutex.RLock()
	defer fake.hasVMMutex.RUnlock()
	return fake.hasVMArgsForCall[i].arg1
}

func (fake *FakeCPI) HasVMReturns(result1 bool, result2 error) {
	fake.HasVMStub = nil
	fake.hasVMReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) RebootVM(arg1 apiv1.VMCID) error {
	fake.rebootVMMutex.Lock()
	fake.rebootVMArgsForCall = append(fake.rebootVMArgsForCall, struct {
		arg1 apiv1.VMCID
	}{arg1})
	fake.recordInvocation("RebootVM", []interface{}{arg1})
	fake.rebootVMMutex.Unlock()
	if fake.RebootVMStub != nil {
		return fake.RebootVMStub(arg1)
	} else {
		return fake.rebootVMReturns.result1
	}
}

func (fake *FakeCPI) RebootVMCallCount() int {
	fake.rebootVMMutex.RLock()
	defer fake.rebootVMMutex.RUnlock()
	return len(fake.rebootVMArgsForCall)
}

func (fake *FakeCPI) RebootVMArgsForCall(i int) apiv1.VMCID {
	fake.rebootVMMutex.RLock()
	defer fake.rebootVMMutex.RUnlock()
	return fake.rebootVMArgsForCall[i].arg1
}

func (fake *FakeCPI) RebootVMReturns(result1 error) {
	fake.RebootVMStub = nil
	fake.rebootVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPI) GetDisks(arg1 apiv1.VMCID) ([]apiv1.DiskCID, error) {
	fake.getDisksMutex.Lock()
	fake.getDisksArgsForCall = append(fake.getDisksArgsForCall, struct {
		arg1 apiv1.VMCID
	}{arg1})
	fake.recordInvocation("GetDisks", []interface{}{arg1})
	fake.getDisksMutex.Unlock()
	if fake.GetDisksStub != nil {
		return fake.GetDisksStub(arg1)
	} else {
		return fake.getDisksReturns.result1, fake.getDisksReturns.result2
	}
}

func (fake *FakeCPI) GetDisksCallCount() int {
	fake.getDisksMutex.RLock()
	defer fake.getDisksMutex.RUnlock()
	return len(fake.getDisksArgsForCall)
}

func (fake *FakeCPI) GetDisksArgsForCall(i int) apiv1.VMCID {
	fake.getDisksMutex.RLock()
	defer fake.getDisksMutex.RUnlock()
	return fake.getDisksArgsForCall[i].arg1
}

func (fake *FakeCPI) GetDisksReturns(result1 []apiv1.DiskCID, result2 error) {
	fake.GetDisksStub = nil
	fake.getDisksReturns = struct {
		result1 []apiv1.DiskCID
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) CreateDisk(arg1 int, arg2 apiv1.DiskCloudProps, arg3 *apiv1.VMCID) (apiv1.DiskCID, error) {
	fake.createDiskMutex.Lock()
	fake.createDiskArgsForCall = append(fake.createDiskArgsForCall, struct {
		arg1 int
		arg2 apiv1.DiskCloudProps
		arg3 *apiv1.VMCID
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDisk", []interface{}{arg1, arg2, arg3})
	fake.createDiskMutex.Unlock()
	if fake.CreateDiskStub != nil {
		return fake.CreateDiskStub(arg1, arg2, arg3)
	} else {
		return fake.createDiskReturns.result1, fake.createDiskReturns.result2
	}
}

func (fake *FakeCPI) CreateDiskCallCount() int {
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	return len(fake.createDiskArgsForCall)
}

func (fake *FakeCPI) CreateDiskArgsForCall(i int) (int, apiv1.DiskCloudProps, *apiv1.VMCID) {
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	return fake.createDiskArgsForCall[i].arg1, fake.createDiskArgsForCall[i].arg2, fake.createDiskArgsForCall[i].arg3
}

func (fake *FakeCPI) CreateDiskReturns(result1 apiv1.DiskCID, result2 error) {
	fake.CreateDiskStub = nil
	fake.createDiskReturns = struct {
		result1 apiv1.DiskCID
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) DeleteDisk(arg1 apiv1.DiskCID) error {
	fake.deleteDiskMutex.Lock()
	fake.deleteDiskArgsForCall = append(fake.deleteDiskArgsForCall, struct {
		arg1 apiv1.DiskCID
	}{arg1})
	fake.recordInvocation("DeleteDisk", []interface{}{arg1})
	fake.deleteDiskMutex.Unlock()
	if fake.DeleteDiskStub != nil {
		return fake.DeleteDiskStub(arg1)
	} else {
		return fake.deleteDiskReturns.result1
	}
}

func (fake *FakeCPI) DeleteDiskCallCount() int {
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	return len(fake.deleteDiskArgsForCall)
}

func (fake *FakeCPI) DeleteDiskArgsForCall(i int) apiv1.DiskCID {
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	return fake.deleteDiskArgsForCall[i].arg1
}

func (fake *FakeCPI) DeleteDiskReturns(result1 error) {
	fake.DeleteDiskStub = nil
	fake.deleteDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPI) AttachDisk(arg1 apiv1.VMCID, arg2 apiv1.DiskCID) (interface{}, error) {
	fake.attachDiskMutex.Lock()
	fake.attachDiskArgsForCall = append(fake.attachDiskArgsForCall, struct {
		arg1 apiv1.VMCID
		arg2 apiv1.DiskCID
	}{arg1, arg2})
	fake.recordInvocation("AttachDisk", []interface{}{arg1, arg2})
	fake.attachDiskMutex.Unlock()
	if fake.AttachDiskStub != nil {
		return fake.AttachDiskStub(arg1, arg2)
	} else {
		return fake.attachDiskReturns.result1, fake.attachDiskReturns.result2
	}
}

func (fake *FakeCPI) AttachDiskCallCount() int {
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	return len(fake.attachDiskArgsForCall)
}

func (fake *FakeCPI) AttachDiskArgsForCall(i int) (apiv1.VMCID, apiv1.DiskCID) {
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	return fake.attachDiskArgsForCall[i].arg1, fake.attachDiskArgsForCall[i].arg2
}

func (fake *FakeCPI) AttachDiskReturns(result1 interface{}, result2 error) {
	fake.AttachDiskStub = nil
	fake.attachDiskReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) DetachDisk(arg1 apiv1.VMCID, arg2 apiv1.DiskCID) error {
	fake.detachDiskMutex.Lock()
	fake.detachDiskArgsForCall = append(fake.detachDiskArgsForCall, struct {
		arg1 apiv1.VMCID
		arg2 apiv1.DiskCID
	}{arg1, arg2})
	fake.recordInvocation("DetachDisk", []interface{}{arg1, arg2})
	fake.detachDiskMutex.Unlock()
	if fake.DetachDiskStub != nil {
		return fake.DetachDiskStub(arg1, arg2)
	} else {
		return fake.detachDiskReturns.result1
	}
}

func (fake *FakeCPI) DetachDiskCallCount() int {
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	return len(fake.detachDiskArgsForCall)
}

func (fake *FakeCPI) DetachDiskArgsForCall(i int) (apiv1.VMCID, apiv1.DiskCID) {
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	return fake.detachDiskArgsForCall[i].arg1, fake.detachDiskArgsForCall[i].arg2
}

func (fake *FakeCPI) DetachDiskReturns(result1 error) {
	fake.DetachDiskStub = nil
	fake.detachDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPI) HasDisk(arg1 apiv1.DiskCID) (bool, error) {
	fake.hasDiskMutex.Lock()
	fake.hasDiskArgsForCall = append(fake.hasDiskArgsForCall, struct {
		arg1 apiv1.DiskCID
	}{arg1})
	fake.recordInvocation("HasDisk", []interface{}{arg1})
	fake.hasDiskMutex.Unlock()
	if fake.HasDiskStub != nil {
		return fake.HasDiskStub(arg1)
	} else {
		return fake.hasDiskReturns.result1, fake.hasDiskReturns.result2
	}
}

func (fake *FakeCPI) HasDiskCallCount() int {
	fake.hasDiskMutex.RLock()
	defer fake.hasDiskMutex.RUnlock()
	return len(fake.hasDiskArgsForCall)
}

func (fake *FakeCPI) HasDiskArgsForCall(i int) apiv1.DiskCID {
	fake.hasDiskMutex.RLock()
	defer fake.hasDiskMutex.RUnlock()
	return fake.hasDiskArgsForCall[i].arg1
}

func (fake *FakeCPI) HasDiskReturns(result1 bool, result2 error) {
	fake.HasDiskStub = nil
	fake.hasDiskReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	fake.calculateVMCloudPropertiesMutex.RLock()
	defer fake.calculateVMCloudPropertiesMutex.RUnlock()
	fake.setVMMetadataMutex.RLock()
	defer fake.setVMMetadataMutex.RUnlock()
	fake.hasVMMutex.RLock()
	defer fake.hasVMMutex.RUnlock()
	fake.rebootVMMutex.RLock()
	defer fake.rebootVMMutex.RUnlock()
	fake.getDisksMutex.RLock()
	defer fake.getDisksMutex.RUnlock()
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	fake.hasDiskMutex.RLock()
	defer fake.hasDiskMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apiv1.CPI = new(FakeCPI)
